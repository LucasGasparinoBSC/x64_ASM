     1                                  ;hello.asm
     2                                  
     3                                  ; Data section: section for declaring initialized data in the format:
     4                                  ; 		<var name> <type> <value>
     5                                  ; Possible data types are:
     6                                  ; 		db - byte - 8 bits
     7                                  ; 		dw - word - 16 bits
     8                                  ; 		dd - double word - 32 bits
     9                                  ; 		dq - quad word - 64 bits
    10                                  ; this section can also contain constants that cannot be changed by the program, declared as:
    11                                  ; 		<var name> equ <value>
    12                                  section .data
    13                                  	; Here, 'msg' points to the memory address of the 1st byte (db) of the string, character "H".
    14                                  	; The 0 after the string indicates the end of a human-readable string (NULL terminator).
    15                                      ; The variable NL contains the ASCII code (0x) for settiing a new line.
    16                                      ; Variable msg2 contains the same string as msg, but adds the new line character at the end.
    17 00000000 48656C6C6F2C20776F-         msg db "Hello, world", 0
    17 00000009 726C6400           
    18 0000000D 0A                          NL  db 0xa
    19 0000000E 48656C6C6F2C20776F-         msg2 db "Hello, world", 10, 0
    19 00000017 726C640A00         
    20                                  
    21                                  ; BSS section: section for declaring uninitialized data in the format:
    22                                  ; 		<var name> <type> <number>
    23                                  ; Possible data types are:
    24                                  ; 		resb - byte - 8 bits
    25                                  ; 		resw - word - 16 bits
    26                                  ; 		resd - double word - 32 bits
    27                                  ; 		resq - quad word - 64 bits
    28                                  ; For example, an array with 20 64-bit entries can be declared as:
    29                                  ; 		arr resq 20
    30                                  ; Variables declared here do not have values: at execution time, the program
    31                                  ; will allocate memory for them, and initialize them to zero. Thet can later be
    32                                  ; changed by the program.
    33                                  section .bss
    34                                  
    35                                  ; Text section: section for declaring the source code itself. It starts with the
    36                                  ; entry point of the program, which is the function 'main' in this case, declared
    37                                  ; as a global function.
    38                                  section .text
    39                                      global main ; declare label main as a global function, and start point of the program
    40                                  
    41                                  ; Label main: description
    42                                  ; Moves a system call code (1) into the RAX register, meanning  it will be used for writing.
    43                                  ; Moves the file descriptor (1) into the RDI register, meaning it will be used for stdout (terrminal).
    44                                  ; Moves the address of the string into the RSI register, meaning it will be used for the string to display.
    45                                  ; Moves the length of the string into the RDX register, meaning it will be used for the length of the string.
    46                                  ; Executes the system call.
    47                                  ; Moves a system call code (60) into the RAX register, meanning  it will be used for exiting.
    48                                  ; Moves the exit code (0) into the RDI register, meaning it will be used for success exit code.
    49                                  ; Executes the system call.
    50                                  main:            ; Label 'main' where the program starts.
    51 00000000 B801000000                  mov rax, 1   ; 1 = write
    52 00000005 BF01000000                  mov rdi, 1   ; 1 = stdout
    53 0000000A 48BE-                       mov rsi, msg ; string to display in rsi
    53 0000000C [0000000000000000] 
    54 00000014 BA0C000000                  mov rdx, 12  ; length of string in rdx
    55 00000019 0F05                        syscall      ; display the string
    56 0000001B B801000000                  mov rax, 1   ; 1 = write
    57 00000020 BF01000000                  mov rdi, 1   ; 1 = stdout
    58 00000025 48BE-                       mov rsi, NL  ; Go to next line
    58 00000027 [0D00000000000000] 
    59 0000002F BA01000000                  mov rdx, 1   ; length of string in rdx
    60 00000034 0F05                        syscall      ; display the string
    61 00000036 B801000000                  mov rax, 1   ; 1 = write
    62 0000003B BF01000000                  mov rdi, 1   ; 1 = stdout
    63 00000040 48BE-                       mov rsi, msg2; string to display in rsi
    63 00000042 [0E00000000000000] 
    64 0000004A BA0D000000                  mov rdx, 13  ; length of string in rdx
    65 0000004F 0F05                        syscall      ; display the string
    66 00000051 B83C000000                  mov rax, 60  ; 60 = exit
    67 00000056 BF00000000                  mov rdi, 0   ; 0 = success exit code
    68 0000005B 0F05                        syscall      ; exit
